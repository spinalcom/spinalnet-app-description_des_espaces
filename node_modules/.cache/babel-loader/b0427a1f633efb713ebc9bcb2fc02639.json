{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/ferdi/Documents/Work/recovery/Dashboards/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/home/ferdi/Documents/Work/recovery/Dashboards/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/ferdi/Documents/Work/recovery/Dashboards/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport { getBuildingInfosApi, getBuildingAreaApi, getFloorAreaApi, getFloorRoomListApi, getRoomAreaApi, getRoomTicketListApi, getControlEndPointListApi, getOccupation } from '../api';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    type: 'geographicContext',\n    buildingInfos: {},\n    totalArea: 0,\n    floorArea: 0,\n    floorList: [],\n    roomList: [],\n    roomInfo: [],\n    roomAreas: [],\n    ticketFloor: 0,\n    occupationFloor: 0,\n    controlEndPointList: []\n  },\n  getters: {\n    type: function type(state) {\n      return state.type;\n    },\n    buildingInfos: function buildingInfos(state) {\n      return state.buildingInfos;\n    },\n    floorList: function floorList(state) {\n      return state.floorList;\n    },\n    totalArea: function totalArea(state) {\n      return state.totalArea;\n    },\n    floorArea: function floorArea(state) {\n      return state.floorArea;\n    },\n    roomList: function roomList(state) {\n      return state.roomList;\n    },\n    roomAreas: function roomAreas(state) {\n      return state.roomAreas;\n    },\n    roomInfo: function roomInfo(state) {\n      return state.roomInfo;\n    },\n    controlEndPointList: function controlEndPointList(state) {\n      return state.controlEndPointList;\n    },\n    ticketFloor: function ticketFloor(state) {\n      return state.ticketFloor;\n    },\n    occupationFloor: function occupationFloor(state) {\n      return state.occupationFloor;\n    }\n  },\n  mutations: {\n    setBuildingInfos: function setBuildingInfos(state, buildingInfo) {\n      return state.buildingInfos = buildingInfo;\n    },\n    setBuildingArea: function setBuildingArea(state, area) {\n      return state.totalArea = area;\n    },\n    setFloorList: function setFloorList(state, floorList) {\n      return state.floorList = floorList;\n    },\n    setFloorArea: function setFloorArea(state, area) {\n      return state.totalArea = area;\n    },\n    setFloorRoomList: function setFloorRoomList(state, resp) {\n      return state.roomList = resp;\n    },\n    setRoomArea: function setRoomArea(state, roomArray) {\n      return state.roomAreas = roomArray;\n    },\n    setRoomInfo: function setRoomInfo(state, info) {\n      return state.roomInfo = info;\n    },\n    setControlEndPointList: function setControlEndPointList(state, resp) {\n      return state.controlEndPointList = resp;\n    }\n  },\n  actions: {\n    getBuildingInfos: function getBuildingInfos(_ref, node) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var commit, resp, info, floorList, buildingInfo;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                commit = _ref.commit;\n                _context3.next = 3;\n                return getBuildingInfosApi();\n\n              case 3:\n                resp = _context3.sent;\n\n                info = function info() {\n                  return {\n                    id: 0,\n                    name: '',\n                    area: 0,\n                    ticket: 0,\n                    occupation: 0\n                  };\n                };\n\n                floorList = new Array(resp.children[0].children.length).fill(null).map(info);\n                console.log('Building info', resp.children[0].children);\n                buildingInfo = new Array(resp.children.length).fill(null).map(info); //////////////////////////////////////////////////\n                // Building occupatiion//\n                // const floors = resp.children[0].children;\n                // for (const floor of floors) {\n                //   const p = floor.children.map(room =>{\n                //     let controlEndPoints = await getControlEndPointListApi(room.dynamicId);\n                //     let roomTicket = await getRoomTicketListApi(room.dynamicId);\n                //     return{\n                //       id: 1,\n                //       occupation: getOccupation(controlEndPoints),\n                //       ticket: roomTicket.length\n                //     }\n                //     }) \n                //     const floorInfo = Promise.all(p)\n                //     console.log('loor inf ', floorInfo);\n                // }\n                // function getOccupation(controlEndPoints) {\n                //   for (const controlEndPoint of controlEndPoints) {\n                //     for (const endpoint of controlEndPoint.endpoints) {\n                //       if (endpoint.name === \"Occupation\") {\n                //         return endpoint.currentValue\n                //       }\n                //     }\n                //   }\n                //   return false\n                // }\n                //////////////////////////////////////////////\n\n                if (node != undefined && node.type === 'geographicBuilding') {\n                  _this.state.type = resp.type;\n                }\n\n                resp.children.map(function (building, jendex) {\n                  var buildingTickets = 0;\n                  var buildingOccupation = 0;\n                  var roomCount = 0;\n                  building.children.map( /*#__PURE__*/function () {\n                    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(floor, index) {\n                      var floorInfo, occupationCount, ticketCount;\n                      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              _context2.next = 2;\n                              return getFloorAreaApi(floor.dynamicId);\n\n                            case 2:\n                              floorInfo = _context2.sent;\n                              floorList[index].name = floor.name;\n                              floorList[index].area = floorInfo.area;\n                              floorList[index].id = floor.dynamicId;\n                              occupationCount = 0;\n                              ticketCount = 0;\n                              floor.children.map( /*#__PURE__*/function () {\n                                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(room) {\n                                  var roomTicket, controlEndPoints, occupationRes;\n                                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                                    while (1) {\n                                      switch (_context.prev = _context.next) {\n                                        case 0:\n                                          roomCount++;\n                                          _context.next = 3;\n                                          return getRoomTicketListApi(room.dynamicId);\n\n                                        case 3:\n                                          roomTicket = _context.sent;\n                                          _context.next = 6;\n                                          return getControlEndPointListApi(room.dynamicId);\n\n                                        case 6:\n                                          controlEndPoints = _context.sent;\n                                          occupationRes = getOccupation(controlEndPoints);\n\n                                          if (occupationRes === true) {\n                                            occupationCount++;\n                                            buildingOccupation++;\n                                          }\n\n                                          ticketCount += roomTicket.length;\n                                          buildingTickets += roomTicket.length;\n                                          buildingInfo[jendex].ticket = buildingTickets;\n                                          floorList[index].occupation = Math.round(occupationCount * 100 / floor.children.length);\n                                          floorList[index].ticket = ticketCount;\n                                          buildingInfo[jendex].occupation = Math.round(buildingOccupation * 100 / roomCount);\n\n                                        case 15:\n                                        case \"end\":\n                                          return _context.stop();\n                                      }\n                                    }\n                                  }, _callee);\n                                }));\n\n                                return function (_x3) {\n                                  return _ref3.apply(this, arguments);\n                                };\n                              }());\n                              console.log('building info', buildingInfo);\n\n                            case 10:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n\n                    return function (_x, _x2) {\n                      return _ref2.apply(this, arguments);\n                    };\n                  }());\n                });\n                commit('setBuildingInfos', resp);\n                commit('setFloorList', floorList);\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    getBuildingArea: function getBuildingArea(_ref4, node) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var commit, resp, _resp;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                commit = _ref4.commit;\n                console.log('node', node);\n\n                if (!(node != undefined && node.type === 'geographicBuilding')) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                _context4.next = 5;\n                return getBuildingAreaApi();\n\n              case 5:\n                resp = _context4.sent;\n                console.log('area', resp.area);\n                commit('setBuildingArea', resp.area);\n                _context4.next = 16;\n                break;\n\n              case 10:\n                if (!(node === undefined || node.type === 'geographicContext')) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                console.log(\"geographicContext\", node);\n                _context4.next = 14;\n                return getBuildingAreaApi();\n\n              case 14:\n                _resp = _context4.sent;\n                commit('setBuildingArea', _resp.area);\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    getFloorArea: function getFloorArea(_ref5, id) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var commit, resp;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                commit = _ref5.commit;\n                _context5.next = 3;\n                return getFloorAreaApi(id);\n\n              case 3:\n                resp = _context5.sent;\n                console.log('area', resp.area);\n                commit('setFloorArea', resp.area);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n    getFloorRoomList: function getFloorRoomList(_ref6, id) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var commit, resp, p, roomInfo, occupationCount, count, tickets, _iterator, _step, room;\n\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                commit = _ref6.commit;\n                _context7.next = 3;\n                return getFloorRoomListApi(id);\n\n              case 3:\n                resp = _context7.sent;\n                console.log('room list', resp);\n\n                if (resp.length) {\n                  _this2.state.type = resp[0].type;\n                }\n\n                p = resp.map( /*#__PURE__*/function () {\n                  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(room) {\n                    var areaInfo, roomTicket, controlEndPoints;\n                    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                      while (1) {\n                        switch (_context6.prev = _context6.next) {\n                          case 0:\n                            _context6.next = 2;\n                            return getRoomAreaApi(room.dynamicId);\n\n                          case 2:\n                            areaInfo = _context6.sent;\n                            _context6.next = 5;\n                            return getRoomTicketListApi(room.dynamicId);\n\n                          case 5:\n                            roomTicket = _context6.sent;\n                            _context6.next = 8;\n                            return getControlEndPointListApi(room.dynamicId);\n\n                          case 8:\n                            controlEndPoints = _context6.sent;\n                            return _context6.abrupt(\"return\", {\n                              id: room.dynamicId,\n                              name: room.name,\n                              area: areaInfo.area,\n                              ticket: roomTicket.length,\n                              occupation: getOccupation(controlEndPoints)\n                            });\n\n                          case 10:\n                          case \"end\":\n                            return _context6.stop();\n                        }\n                      }\n                    }, _callee6);\n                  }));\n\n                  return function (_x4) {\n                    return _ref7.apply(this, arguments);\n                  };\n                }());\n                _context7.next = 9;\n                return Promise.all(p);\n\n              case 9:\n                roomInfo = _context7.sent;\n                occupationCount = 0;\n                count = 0;\n                tickets = 0;\n                _iterator = _createForOfIteratorHelper(roomInfo);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    room = _step.value;\n                    count++;\n\n                    if (room.ticket != 0) {\n                      tickets += room.ticket;\n                    }\n\n                    if (room.occupation === true) {\n                      occupationCount++;\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                _this2.state.occupationFloor = occupationCount / count * 100;\n                _this2.state.ticketFloor = tickets; // const info = () => {\n                //   return {id: 0, name: '', area: 0, ticket: 0, occupation: false}\n                // }\n                // const roomInfo = new Array(resp.length).fill(null).map(info);\n                // this.roomList = resp;\n                // const p =resp.map(async (room, index) => {\n                //   let areaInfo = await getRoomAreaApi(room.dynamicId); \n                //   let roomTicket = await getRoomTicketListApi(room.dynamicId); \n                //   let controlEndPoints = await getControlEndPointListApi(room.dynamicId);\n                //   controlEndPoints.forEach((controlEndPoint) =>{\n                //     const endpoints = controlEndPoint.endpoints\n                //     const occupation =  endpoints.filter( (endpoint) => endpoint.name === \"Occupation\");\n                //     console.log(index, 'occupation', room.name,occupation[0].currentValue);\n                //     roomInfo[index].occupation = occupation[0].currentValue\n                //     console.log(roomInfo[index].occupation);\n                //   })\n                //   roomInfo[index].id = room.dynamicId;\n                //   roomInfo[index].name = room.name;\n                //   roomInfo[index].area = areaInfo.area;\n                //   roomInfo[index].ticket = roomTicket.length;\n                //   // roomArray.push(areaInfo.area);\n                // });\n                // await Promise.all(p)\n\n                console.log('room info', roomInfo);\n                commit('setFloorRoomList', p); // commit('setRoomArea',roomArray)\n\n                commit('setRoomInfo', roomInfo);\n\n              case 20:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    } // async getControlEndPointList({commit}, id){\n    //   console.log(id);\n    //   this.state.roomList.map(async (room) =>{\n    //     // const resps = await getControlEndPointListApi(room.dynamicId);\n    //     // resps.map((resp) =>{\n    //     // const endpoints = resp.endpoints\n    //     // const occupation =  endpoints.filter( (endpoint) => endpoint.name === \"Occupation\");\n    //     // console.log('occupation',occupation[0].currentValue);\n    //     // this.state.roomInfo.occupation = occupation[0].currentValue\n    //     // console.log(this.state.roomInfo.occupation);\n    //     // })\n    //   })\n    //   const resp = 1;\n    //   commit('setControlEndPointList', resp)\n    // }\n    // async getRoomArea({commit}){\n    //   this.roomList.forEach(room => {\n    //     const resp =  getRoomAreaApi(room.dynamicId)\n    //     console.log(resp);\n    //     commit('setRoomArea', resp);\n    //   });\n    // }\n\n  }\n});","map":{"version":3,"names":["Vue","Vuex","getBuildingInfosApi","getBuildingAreaApi","getFloorAreaApi","getFloorRoomListApi","getRoomAreaApi","getRoomTicketListApi","getControlEndPointListApi","getOccupation","use","Store","state","type","buildingInfos","totalArea","floorArea","floorList","roomList","roomInfo","roomAreas","ticketFloor","occupationFloor","controlEndPointList","getters","mutations","setBuildingInfos","buildingInfo","setBuildingArea","area","setFloorList","setFloorArea","setFloorRoomList","resp","setRoomArea","roomArray","setRoomInfo","info","setControlEndPointList","actions","getBuildingInfos","node","commit","id","name","ticket","occupation","Array","children","length","fill","map","console","log","undefined","building","jendex","buildingTickets","buildingOccupation","roomCount","floor","index","dynamicId","floorInfo","occupationCount","ticketCount","room","roomTicket","controlEndPoints","occupationRes","Math","round","getBuildingArea","getFloorArea","getFloorRoomList","p","areaInfo","Promise","all","count","tickets"],"sources":["/home/ferdi/Documents/Work/recovery/Dashboards/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport { getBuildingInfosApi, getBuildingAreaApi, getFloorAreaApi, getFloorRoomListApi, getRoomAreaApi, getRoomTicketListApi, getControlEndPointListApi, getOccupation } from '../api'\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    type: 'geographicContext',\n    buildingInfos: {},\n    totalArea: 0,\n    floorArea: 0,\n    floorList: [],\n    roomList: [],\n    roomInfo: [],\n    roomAreas: [],\n    ticketFloor: 0,\n    occupationFloor: 0,\n    controlEndPointList: [],\n\n  },\n  getters: {\n    type: (state) => state.type,\n    buildingInfos: (state) => state.buildingInfos,\n    floorList: (state) => state.floorList,\n    totalArea: (state) => state.totalArea,\n    floorArea: (state) => state.floorArea,\n    roomList: (state) => state.roomList,\n    roomAreas: (state) => state.roomAreas,\n    roomInfo: (state) => state.roomInfo,\n    controlEndPointList: (state) => state.controlEndPointList,\n    ticketFloor:(state) => state.ticketFloor,\n    occupationFloor:(state) => state.occupationFloor,\n  },\n  mutations: {\n    setBuildingInfos: (state, buildingInfo) => (state.buildingInfos = buildingInfo),\n    setBuildingArea: (state, area) => (state.totalArea = area),\n    setFloorList: (state, floorList) => (state.floorList = floorList),\n    setFloorArea: (state, area) => (state.totalArea = area),\n    setFloorRoomList: (state, resp) => (state.roomList = resp),\n    setRoomArea: (state, roomArray) => (state.roomAreas = roomArray),\n    setRoomInfo: (state, info) => (state.roomInfo = info),\n    setControlEndPointList: (state, resp) => (state.controlEndPointList = resp)\n  },\n  actions: {\n    async getBuildingInfos({ commit }, node) {\n      const resp = await getBuildingInfosApi();\n      const info = () => {\n        return { id: 0, name: '', area: 0, ticket: 0, occupation: 0 }\n      }\n      const floorList = new Array(resp.children[0].children.length).fill(null).map(info);\n      console.log('Building info', resp.children[0].children);\n      const buildingInfo = new Array(resp.children.length).fill(null).map(info);\n      \n      //////////////////////////////////////////////////\n                  // Building occupatiion//\n\n      // const floors = resp.children[0].children;\n      // for (const floor of floors) {\n      //   const p = floor.children.map(room =>{\n      //     let controlEndPoints = await getControlEndPointListApi(room.dynamicId);\n      //     let roomTicket = await getRoomTicketListApi(room.dynamicId);\n      //     return{\n      //       id: 1,\n      //       occupation: getOccupation(controlEndPoints),\n      //       ticket: roomTicket.length\n      //     }\n      //     }) \n      //     const floorInfo = Promise.all(p)\n      //     console.log('loor inf ', floorInfo);\n      // }\n      // function getOccupation(controlEndPoints) {\n      //   for (const controlEndPoint of controlEndPoints) {\n      //     for (const endpoint of controlEndPoint.endpoints) {\n      //       if (endpoint.name === \"Occupation\") {\n      //         return endpoint.currentValue\n      //       }\n      //     }\n      //   }\n      //   return false\n      // }\n      //////////////////////////////////////////////\n      if (node != undefined && node.type === 'geographicBuilding') {\n        this.state.type = resp.type\n      }\n      resp.children.map((building, jendex) => {\n        let buildingTickets = 0;\n        let buildingOccupation = 0;\n        let roomCount = 0;\n        building.children.map(async (floor, index) => {\n          const floorInfo = await getFloorAreaApi(floor.dynamicId)\n          floorList[index].name = floor.name\n          floorList[index].area = floorInfo.area\n          floorList[index].id = floor.dynamicId\n          let occupationCount = 0;\n          let ticketCount = 0;\n          floor.children.map(async room => {\n            roomCount++;\n            let roomTicket = await getRoomTicketListApi(room.dynamicId);\n            let controlEndPoints = await getControlEndPointListApi(room.dynamicId);\n            let occupationRes = getOccupation(controlEndPoints);\n            if(occupationRes === true) {\n              occupationCount++;\n              buildingOccupation++;\n            }\n            ticketCount +=  roomTicket.length;\n            buildingTickets += roomTicket.length;\n            buildingInfo[jendex].ticket = buildingTickets;\n            floorList[index].occupation = Math.round(occupationCount*100/(floor.children.length));\n            floorList[index].ticket = ticketCount;\n            buildingInfo[jendex].occupation = Math.round(buildingOccupation*100/(roomCount));\n            \n          });       \n          \n          console.log('building info', buildingInfo);\n        })      \n        \n      });\n      commit('setBuildingInfos', resp);\n      commit('setFloorList', floorList);\n    },\n    async getBuildingArea({ commit }, node) {\n      console.log('node', node);\n      if (node != undefined && node.type === 'geographicBuilding') {\n        const resp = await getBuildingAreaApi()\n        console.log('area', resp.area);\n        commit('setBuildingArea', resp.area);\n      } else if (node === undefined || node.type === 'geographicContext') {\n        console.log(\"geographicContext\", node);\n        const resp = await getBuildingAreaApi()\n        commit('setBuildingArea', resp.area);\n      }\n\n    },\n    async getFloorArea({ commit }, id) {\n      const resp = await getFloorAreaApi(id)\n      console.log('area', resp.area);\n      commit('setFloorArea', resp.area);\n    },\n    async getFloorRoomList({ commit }, id) {\n      const resp = await getFloorRoomListApi(id)\n      console.log('room list', resp);\n      if (resp.length) {\n        this.state.type = resp[0].type;\n      }\n      const p = resp.map(async (room) => {\n        let areaInfo = await getRoomAreaApi(room.dynamicId);\n        let roomTicket = await getRoomTicketListApi(room.dynamicId);\n        let controlEndPoints = await getControlEndPointListApi(room.dynamicId);\n        \n        return {\n          id: room.dynamicId,\n          name: room.name,\n          area: areaInfo.area,\n          ticket: roomTicket.length,\n          occupation: getOccupation(controlEndPoints)\n        }\n      });\n      const roomInfo =  await Promise.all(p)\n      let occupationCount = 0;\n      let count = 0;\n      let tickets = 0;\n      for (const room of roomInfo) {\n        count ++;\n        if(room.ticket != 0){\n          tickets += room.ticket\n        }\n        if(room.occupation === true){\n          occupationCount++;\n        }\n      }\n      this.state.occupationFloor = occupationCount/count*100\n      this.state.ticketFloor = tickets;\n\n\n      // const info = () => {\n      //   return {id: 0, name: '', area: 0, ticket: 0, occupation: false}\n      // }\n      // const roomInfo = new Array(resp.length).fill(null).map(info);\n      // this.roomList = resp;\n      // const p =resp.map(async (room, index) => {\n      //   let areaInfo = await getRoomAreaApi(room.dynamicId); \n      //   let roomTicket = await getRoomTicketListApi(room.dynamicId); \n      //   let controlEndPoints = await getControlEndPointListApi(room.dynamicId);\n      //   controlEndPoints.forEach((controlEndPoint) =>{\n      //     const endpoints = controlEndPoint.endpoints\n      //     const occupation =  endpoints.filter( (endpoint) => endpoint.name === \"Occupation\");\n      //     console.log(index, 'occupation', room.name,occupation[0].currentValue);\n      //     roomInfo[index].occupation = occupation[0].currentValue\n      //     console.log(roomInfo[index].occupation);\n      //   })\n\n      //   roomInfo[index].id = room.dynamicId;\n      //   roomInfo[index].name = room.name;\n      //   roomInfo[index].area = areaInfo.area;\n      //   roomInfo[index].ticket = roomTicket.length;\n\n      //   // roomArray.push(areaInfo.area);\n      // });\n      // await Promise.all(p)\n      console.log('room info', roomInfo);\n      commit('setFloorRoomList', p);\n      // commit('setRoomArea',roomArray)\n      commit('setRoomInfo', roomInfo)\n    },\n    \n    // async getControlEndPointList({commit}, id){\n    //   console.log(id);\n    //   this.state.roomList.map(async (room) =>{\n    //     // const resps = await getControlEndPointListApi(room.dynamicId);\n    //     // resps.map((resp) =>{\n    //     // const endpoints = resp.endpoints\n    //     // const occupation =  endpoints.filter( (endpoint) => endpoint.name === \"Occupation\");\n    //     // console.log('occupation',occupation[0].currentValue);\n    //     // this.state.roomInfo.occupation = occupation[0].currentValue\n    //     // console.log(this.state.roomInfo.occupation);\n    //     // })\n    //   })\n    //   const resp = 1;\n    //   commit('setControlEndPointList', resp)\n    // }\n    // async getRoomArea({commit}){\n    //   this.roomList.forEach(room => {\n    //     const resp =  getRoomAreaApi(room.dynamicId)\n    //     console.log(resp);\n    //     commit('setRoomArea', resp);\n    //   });\n\n    // }\n  },\n\n\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}