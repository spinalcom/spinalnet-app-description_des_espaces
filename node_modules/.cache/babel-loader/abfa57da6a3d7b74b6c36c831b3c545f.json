{"ast":null,"code":"import _regeneratorRuntime from \"/home/ferdi/Bureau/Dashboards/description-espaces/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/ferdi/Bureau/Dashboards/description-espaces/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport { getBuildingInfosApi, getBuildingAreaApi, getFloorAreaApi, getFloorRoomListApi, getRoomAreaApi, getRoomTicketListApi } from '../api';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    buildingInfos: {},\n    buildingArea: 0,\n    floorArea: 0,\n    floorList: [],\n    roomList: [],\n    roomInfo: [{}],\n    roomAreas: []\n  },\n  getters: {\n    buildingInfos: function buildingInfos(state) {\n      return state.buildingInfos;\n    },\n    buildingArea: function buildingArea(state) {\n      return state.buildingArea;\n    },\n    floorArea: function floorArea(state) {\n      return state.floorArea;\n    },\n    roomList: function roomList(state) {\n      return state.roomList;\n    },\n    roomAreas: function roomAreas(state) {\n      return state.roomAreas;\n    },\n    roomInfo: function roomInfo(state) {\n      return state.roomInfo;\n    }\n  },\n  mutations: {\n    setBuildingInfos: function setBuildingInfos(state, buildingInfo) {\n      return state.buildingInfos = buildingInfo;\n    },\n    setBuildingArea: function setBuildingArea(state, area) {\n      return state.buildingArea = area;\n    },\n    setFloorArea: function setFloorArea(state, area) {\n      return state.floorArea = area;\n    },\n    setFloorRoomList: function setFloorRoomList(state, resp) {\n      return state.roomList = resp;\n    },\n    setRoomArea: function setRoomArea(state, roomArray) {\n      return state.roomAreas = roomArray;\n    },\n    setRoomInfo: function setRoomInfo(state, info) {\n      return state.roomInfo = info;\n    }\n  },\n  actions: {\n    getBuildingInfos: function getBuildingInfos(_ref) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var commit, resp;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                commit = _ref.commit;\n                _context2.next = 3;\n                return getBuildingInfosApi();\n\n              case 3:\n                resp = _context2.sent;\n                console.log('Building info', resp);\n                resp.children.map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(floor) {\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            console.log(floor);\n\n                          case 1:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n                commit('setBuildingInfos', resp);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    getBuildingArea: function getBuildingArea(_ref3) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var commit, resp;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                commit = _ref3.commit;\n                _context3.next = 3;\n                return getBuildingAreaApi();\n\n              case 3:\n                resp = _context3.sent;\n                // console.log('area',resp.area);\n                commit('setBuildingArea', resp.area);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    getFloorArea: function getFloorArea(_ref4, id) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var commit, resp;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                commit = _ref4.commit;\n                _context4.next = 3;\n                return getFloorAreaApi(id);\n\n              case 3:\n                resp = _context4.sent;\n                console.log('area', resp.area);\n                commit('setFloorArea', resp.area);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    getFloorRoomList: function getFloorRoomList(_ref5, id) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var commit, resp, info, roomInfo;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                commit = _ref5.commit;\n                _context6.next = 3;\n                return getFloorRoomListApi(id);\n\n              case 3:\n                resp = _context6.sent;\n\n                info = function info() {\n                  return {\n                    id: 0,\n                    name: '',\n                    area: 0,\n                    ticket: 0\n                  };\n                };\n\n                roomInfo = new Array(resp.length).fill(null).map(info);\n                _this.roomList = resp;\n                resp.map( /*#__PURE__*/function () {\n                  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(room, index) {\n                    var areaInfo, roomTicket;\n                    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            _context5.next = 2;\n                            return getRoomAreaApi(room.dynamicId);\n\n                          case 2:\n                            areaInfo = _context5.sent;\n                            _context5.next = 5;\n                            return getRoomTicketListApi(room.dynamicId);\n\n                          case 5:\n                            roomTicket = _context5.sent;\n                            console.log(roomTicket); // roomInfo[index].name = room.name;\n                            // roomInfo[index].area = areaInfo.area      \n                            // roomInfo.fill({name: room.name, area: areaInfo.area})\n\n                            roomInfo[index].id = room.dynamicId;\n                            roomInfo[index].name = room.name;\n                            roomInfo[index].area = areaInfo.area;\n                            roomInfo[index].ticket = roomTicket.length; // roomArray.push(areaInfo.area);\n\n                          case 11:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n\n                  return function (_x2, _x3) {\n                    return _ref6.apply(this, arguments);\n                  };\n                }());\n                console.log(roomInfo); // commit('setFloorRoomList', resp);\n                // commit('setRoomArea',roomArray)\n\n                commit('setRoomInfo', roomInfo);\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    } // async getRoomArea({commit}){\n    //   this.roomList.forEach(room => {\n    //     const resp =  getRoomAreaApi(room.dynamicId)\n    //     console.log(resp);\n    //     commit('setRoomArea', resp);\n    //   });\n    // }\n\n  }\n});","map":{"version":3,"names":["Vue","Vuex","getBuildingInfosApi","getBuildingAreaApi","getFloorAreaApi","getFloorRoomListApi","getRoomAreaApi","getRoomTicketListApi","use","Store","state","buildingInfos","buildingArea","floorArea","floorList","roomList","roomInfo","roomAreas","getters","mutations","setBuildingInfos","buildingInfo","setBuildingArea","area","setFloorArea","setFloorRoomList","resp","setRoomArea","roomArray","setRoomInfo","info","actions","getBuildingInfos","commit","console","log","children","map","floor","getBuildingArea","getFloorArea","id","getFloorRoomList","name","ticket","Array","length","fill","room","index","dynamicId","areaInfo","roomTicket"],"sources":["/home/ferdi/Bureau/Dashboards/description-espaces/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport {getBuildingInfosApi, getBuildingAreaApi, getFloorAreaApi, getFloorRoomListApi, getRoomAreaApi, getRoomTicketListApi} from '../api'\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    buildingInfos:{},\n    buildingArea:0,\n    floorArea:0,\n    floorList:[],\n    roomList:[],\n    roomInfo:[{}],\n    roomAreas:[]\n  },\n  getters: {\n    buildingInfos: (state) => state.buildingInfos,\n    buildingArea: (state) => state.buildingArea,\n    floorArea: (state) => state.floorArea,\n    roomList: (state) => state.roomList,\n    roomAreas: (state) => state.roomAreas,\n    roomInfo: (state) => state.roomInfo\n  },\n  mutations: {\n    setBuildingInfos:(state, buildingInfo) => (state.buildingInfos = buildingInfo ),\n    setBuildingArea:(state, area)=> (state.buildingArea = area),\n    setFloorArea: (state, area) => (state.floorArea = area),\n    setFloorRoomList: (state, resp) => (state.roomList = resp),\n    setRoomArea: (state, roomArray)=> (state.roomAreas = roomArray),\n    setRoomInfo: (state, info) => (state.roomInfo = info)\n  },\n  actions: {\n    async getBuildingInfos({commit}){\n      const resp = await getBuildingInfosApi()\n      console.log('Building info',resp);\n      resp.children.map(async floor => {\n        console.log(floor);\n      });\n      commit('setBuildingInfos', resp);\n\n    },\n    async getBuildingArea({commit}){\n      const resp = await getBuildingAreaApi()\n      // console.log('area',resp.area);\n      commit('setBuildingArea', resp.area);\n\n    },\n    async getFloorArea({commit}, id){\n      const resp = await getFloorAreaApi(id)\n      console.log('area',resp.area);\n      commit('setFloorArea', resp.area);\n\n    },\n    async getFloorRoomList({commit}, id){\n      const resp = await getFloorRoomListApi(id)\n      const info = () => {\n        return {id: 0, name: '', area: 0, ticket: 0}\n      }\n      const roomInfo = new Array(resp.length).fill(null).map(info);\n      this.roomList = resp;\n      resp.map(async (room, index) => {\n        let areaInfo = await getRoomAreaApi(room.dynamicId); \n        let roomTicket = await getRoomTicketListApi(room.dynamicId); \n        console.log(roomTicket);\n        // roomInfo[index].name = room.name;\n        // roomInfo[index].area = areaInfo.area      \n        // roomInfo.fill({name: room.name, area: areaInfo.area})\n        roomInfo[index].id = room.dynamicId;\n        roomInfo[index].name = room.name;\n        roomInfo[index].area = areaInfo.area;\n        roomInfo[index].ticket = roomTicket.length;\n\n        // roomArray.push(areaInfo.area);\n      });\n      console.log(roomInfo);\n      // commit('setFloorRoomList', resp);\n      // commit('setRoomArea',roomArray)\n      commit('setRoomInfo',roomInfo )\n    },\n    // async getRoomArea({commit}){\n    //   this.roomList.forEach(room => {\n    //     const resp =  getRoomAreaApi(room.dynamicId)\n    //     console.log(resp);\n    //     commit('setRoomArea', resp);\n    //   });\n\n    // }\n  },\n  \n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}